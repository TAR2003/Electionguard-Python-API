"""
Service for setting up a single guardian with only public key.
"""

#!/usr/bin/env python

from typing import Dict, List, Optional, Tuple, Any
import random
from datetime import datetime
import uuid
from collections import defaultdict
import hashlib
import json
from electionguard.ballot import (
    BallotBoxState,
    CiphertextBallot,
    PlaintextBallot,
    PlaintextBallotSelection,
    PlaintextBallotContest,
    SubmittedBallot,
)
from electionguard.serialize import to_raw, from_raw
from electionguard.constants import get_constants
from electionguard.data_store import DataStore
from electionguard.decryption_mediator import DecryptionMediator
from electionguard.election import CiphertextElectionContext
from electionguard.election_polynomial import (
    LagrangeCoefficientsRecord,
    ElectionPolynomial,
    generate_polynomial
)
from electionguard.encrypt import EncryptionDevice, EncryptionMediator
from electionguard.guardian import Guardian
from electionguard.key_ceremony_mediator import KeyCeremonyMediator
from electionguard.key_ceremony import ElectionKeyPair, ElectionPublicKey
from electionguard.ballot_box import BallotBox, get_ballots
from electionguard.elgamal import ElGamalPublicKey, ElGamalSecretKey, ElGamalCiphertext, ElGamalKeyPair
from electionguard.group import ElementModQ, ElementModP, g_pow_p, int_to_p, int_to_q
from electionguard.manifest import (
    Manifest,
    InternalManifest,
    GeopoliticalUnit,
    Party,
    Candidate,
    ContestDescription as Contest,
    SelectionDescription,
    BallotStyle,
    ElectionType,
    VoteVariationType,
    SpecVersion,
    ContactInformation,
    ReportingUnitType
)
from electionguard_tools.helpers.election_builder import ElectionBuilder
from electionguard.tally import (
    tally_ballots,
    CiphertextTally,
    PlaintextTally,
    CiphertextTallyContest,
    CiphertextTallySelection
)
from electionguard.type import BallotId, GuardianId
from electionguard.utils import get_optional
from electionguard.election_polynomial import ElectionPolynomial, Coefficient, SecretCoefficient, PublicCommitment
from electionguard.schnorr import SchnorrProof
from electionguard.elgamal import ElGamalKeyPair, ElGamalPublicKey, ElGamalSecretKey
from electionguard.hash import hash_elems
from electionguard.decryption_share import DecryptionShare, CompensatedDecryptionShare
from electionguard.decryption import (
    compute_decryption_share,
    compute_decryption_share_for_ballot,
    compute_compensated_decryption_share,
    compute_compensated_decryption_share_for_ballot,
    decrypt_backup,
    compute_lagrange_coefficients_for_guardians as compute_lagrange_coeffs
)


def setup_guardian_service(
    guardian_id: str,
    sequence_order: int,
    public_key: str,
    number_of_guardians: int,
    quorum: int,
    party_names: List[str],
    candidate_names: List[str]
) -> Dict[str, Any]:
    """
    Service function to setup a single guardian using only the public key.

    The guardian generates its own private key, public key, and polynomial locally.
    This service receives only the public key and generates the election-related
    structures using that public key.

    Args:
        guardian_id: Unique identifier for the guardian
        sequence_order: Sequence order of the guardian (1-indexed)
        public_key: Guardian's public key as string (generated by guardian)
        number_of_guardians: Total number of guardians in the election
        quorum: Minimum number of guardians needed for decryption
        party_names: List of party names
        candidate_names: List of candidate names

    Returns:
        Dictionary containing the guardian setup results

    Raises:
        ValueError: If validation fails
    """
    # Validate inputs
    if quorum > number_of_guardians:
        raise ValueError('Quorum cannot be greater than number of guardians')

    if quorum < 1:
        raise ValueError('Quorum must be at least 1')

    if sequence_order < 1 or sequence_order > number_of_guardians:
        raise ValueError(
            'Sequence order must be between 1 and number_of_guardians')

    # Convert public key from string to ElementModP
    try:
        public_key_element = int_to_p(int(public_key))
    except (ValueError, TypeError) as e:
        raise ValueError(f"Invalid public key format: {e}")

    # Create coefficient commitments using the provided public key
    # The first commitment should match the public key
    coefficient_commitments = []
    coefficient_commitments.append(public_key_element)

    # Generate additional coefficient commitments for the quorum
    # These are deterministic commitments based on the public key
    for i in range(1, quorum):
        # Generate additional commitments (simplified approach for demonstration)
        # In practice, these would come from the guardian's polynomial coefficients
        commitment = g_pow_p(int_to_q(hash(f"{public_key}_{i}") % 1000000 + 1))
        coefficient_commitments.append(commitment)

    # Create coefficient proofs (simplified - these would normally prove knowledge of secret values)
    coefficient_proofs = []
    for i, commitment in enumerate(coefficient_commitments):
        # Create a minimal proof structure
        # In practice, these proofs would be generated by the guardian who knows the secrets
        proof = SchnorrProof(
            public_key=commitment,
            commitment=g_pow_p(int_to_q(i + 100)),  # Dummy commitment
            challenge=int_to_q(123456789 + i),       # Dummy challenge
            response=int_to_q(987654321 + i),        # Dummy response
            usage="Prove knowledge of secret value"
        )
        coefficient_proofs.append(proof)

    # Create the election public key structure
    election_public_key = ElectionPublicKey(
        owner_id=guardian_id,
        sequence_order=sequence_order,
        key=public_key_element,
        coefficient_commitments=coefficient_commitments,
        coefficient_proofs=coefficient_proofs
    )

    # Create guardian data structure
    guardian_data = {
        'id': guardian_id,
        'sequence_order': sequence_order,
        'election_public_key': to_raw(election_public_key),
        'backups': {}  # Empty backups since we're setting up individual guardians
    }

    return {
        'guardian_id': guardian_id,
        'sequence_order': sequence_order,
        'guardian_data': guardian_data,
        'election_public_key': to_raw(election_public_key),
        'number_of_guardians': number_of_guardians,
        'quorum': quorum
    }
